"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = "\n  <html>\n    <head>\n      <title>Twitter Bot</title>\n      <meta content=\"initial-scale=1,maximum-scale=1,user-scalable=no,width=device-width\" name=\"viewport\">\n      <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n      <style>\n        body {\n          margin:0;\n          background-color: #f1f1f1;\n          font-family: sans-serif;\n          text-rendering: optimizeLegibility;\n          -webkit-font-smoothing: antialiased;\n          -moz-osx-font-smoothing: grayscale;\n        }\n        *, \n        code {\n          color: #4e4e4e;\n        }\n        article {\n          padding: 50px 0;\n        }\n        form {\n          width: 100%;\n          margin: 0 auto;\n          /*position: fixed;\n          top:50%;\n          left: 50%;\n          -webkit-transform: translate(-50%, -50%);\n          -moz-transform:    translate(-50%, -50%);\n          -ms-transform:     translate(-50%, -50%);\n          -o-transform:      translate(-50%, -50%);\n          transform:         translate(-50%, -50%);*/\n        }\n        h1 {\n          font-size: 24px;\n          margin:0;\n        }\n        p {\n          margin:20px 0 25px;\n          font-size: 14px;\n        }\n        code {\n          font-size: 14px;\n          background-color: white;\n          display: block;\n          padding: 5px 10px 10px;\n        }\n        b {\n          font-size: 14px;\n          line-height: 200%;\n        }\n        input,\n        textarea {\n          border-radius: 0;\n          font-size: 16px;\n          display: block;\n          width: 100%;\n          padding: 10px;\n          border-width: 0;\n          margin-bottom: 15px;\n        }\n        #page-wrap {\n          max-width: 600px;\n          margin: 0 auto;\n        }\n        textarea {\n          height: 20vh;\n          resize: none;\n          text-align: left;\n        }\n        input[type=\"submit\"] {\n          cursor: pointer;\n          color: white;\n          background-color: #4e4e4e;\n          -webkit-appearance: none;\n          -webkit-border-radius: 0;\n        }\n        *:focus {\n          outline: none;\n        }\n        #loading {\n          display: none;\n          position: fixed;\n          top:0;\n          left:0;\n          height: 100%;\n          width: 100%;\n          background-color: rgba(255,255,255,0.95);\n          text-align: center;\n          color: white;\n          font-size: 18px;\n        }\n        #loading img {\n          position: relative;\n          top:50%;\n          margin-top: -82px;\n        }\n        .form-data {\n          padding: 0 7.5px;\n        }\n        .form-data:first-child {\n          padding-left: 0;\n        }\n        .form-data:nth-child(2) {\n          padding-right: 0;\n        }\n        @media (max-width: 748px) {\n          .form-data:first-child {\n            padding: 0px;\n          }\n          .form-data:nth-child(2) {\n            padding: 0px;\n          }\n          body {\n            padding-bottom: 100px;\n          }\n        }\n      </style>\n    </head>\n    <body>\n      <div id=\"page-wrap\" class=\"container\">\n        <article>\n          <h1>Tweet Generator</h1>\n          <p>\n            Enter a Twitter screen name and generate a single tweet.\n            This uses the Twitter API to read all tweets on an account then processes\n            each through the Markov chain algorithm. More data (tweets) produces better results.\n            We recommend using on an account with at least 2,000 tweets.\n            Twitter accounts with very few tweets will return exact tweets the account has previously posted.\n          </p>\n          <code>\n            <b>Markov chain</b>\n            <br/>\n            A stochastic model describing a sequence of possible events in which the probability of each event depends only on the state attained in the previous event.\n          </code>\n        </article>\n        <form\n          id=\"main-form\"\n        >\n          <div class=\"form-data col-xs-12 col-sm-6\">\n            <input\n              placeholder=\"screen name\"\n              id=\"main-input\"\n              type=\"text\"\n            />\n          </div>\n          <div class=\"form-data col-xs-12 col-sm-6\">\n            <input \n              type=\"submit\"\n              value=\"submit\"\n            />\n          </div>\n          <textarea\n            placeholder=\"result\"\n            id=\"result\"\n          ></textarea>\n        </form>\n      </div>\n      <div id=\"loading\">\n        <img \n          src=\"http://i.imgur.com/chnAKoR.gif\"\n        />\n      </div>\n      <script\n        src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js\"\n      ></script>\n      <script \n        src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.7.3/socket.io.min.js\"\n      ></script>\n      <script>\n\n        var socket = io()\n        var form = $('#main-form')\n        var input = $('#main-input')\n        var loader = $('#loading')\n        var result = $('#result')\n\n        function error() {\n          loader.fadeOut()\n          result.val('error')\n        }\n\n        form.on('submit', function(event) {\n          event.preventDefault()\n          input.blur()\n          var value = input.val()  \n          if(value.length > 0) {\n            loader.fadeIn()\n            socket.emit('twitterBot/createPost', {\n              screen_name: input.val()\n            });\n          }\n        })\n\n        socket.on('twitterBot/createPost/error', error);\n\n        socket.on('twitterBot/createPost/complete', function(data) {\n          if(data.sentence.length > 0) {\n            loader.fadeOut()\n            result.val(data.sentence)\n          }\n          else {\n            error()\n          }\n        });\n\n        input.focus()\n\n      </script>\n    </body>\n  </html>\n";